

----------------------------------- 
HQC: a Public-Key Encryption scheme
-----------------------------------


1. SUBMISSION OVERVIEW 
----------------------

In order to fully understand this submission, one should note that HQC is a
public-key encryption scheme submitted as a KEM for which NIST "standard
conversion techniques" should be applied (see NIST FAQ#13). In addition, the
aforementioned KEM is obtained by applying a conversion technique to a PKE. In
order to avoid any confusion, we may refer to:

- HQC_PKE IND-CPA: HQC PKE IND-CPA scheme due to [1].
- HQC_KEM IND-CCA2: HQC KEM IND-CCA2 scheme obtained by applying the
  transformation from [2] to the HQC PKE IND-CPA scheme. It is the
  implementation provided.
- HQC_PKE IND-CCA2: HQC PKE IND-CCA2 scheme obtained by applying NIST "standard
  conversion techniques" to the HQC KEM IND-CCA2 scheme. It is the scheme
  submitted.

Six parameters sets denoted respectively HQC-128-1, HQC-192-1, HQC-192-2, HQC-256-1, HQC-256-2 and HQC-256-3 are provided as explained in the supporting documentation. Each parameter set folder is organized as follows:

- bin/: Files generated during compilation
- doc/: Technical documentation of the scheme
- lib/: Third party libraries used 
- src/: Source code of the scheme  
- doxygen.conf: Documentation configuration file
- Makefile: Makefile


2. INSTALLATION INSTRUCTIONS 
----------------------------

2.1 Requirements

The following softwares and libraries are required: make, gcc, and openssl. The target machine must support AVX2 instructions. Moreover, if the AVX512 instructions are available the source code can be compiled using them.

2.2 Compilation Step

If only AVX2 instructions are available:

Let X denote -128-1, -192-1, -192-2, -256-1, -256-2 or -256-3
depending on the parameter set considered. HQC can be compiled in three
differents ways:
- Execute make hqcX to compile a working example of the scheme. Run bin/hqcX to
  execute all the steps of the scheme and display theirs respective
  performances.
- Execute make hqcX-kat to compile the NIST KAT generator. Run bin/hqcX-kat to
  generate KAT files.
- Execute make hqcX-verbose to compile a working example of the scheme in
  verbose mode. Run bin/hqcX-verbose to generate intermediate values.

If both AVX2 and AVX512 instructions are available:

Let X denotes -128-1, -192-1, -192-2, -256-1, -256-2 or -256-3
depending on the parameter set considered. HQC can be compiled in three
differents ways:
- Execute make hqcX AVX512=1 to compile a working example of the scheme. Run bin/hqcX to
  execute all the steps of the scheme and display theirs respective
  performances.
- Execute make hqcX-kat AVX512=1 to compile the NIST KAT generator. Run bin/hqcX-kat to
  generate KAT files.
- Execute make hqcX-verbose AVX512=1 to compile a working example of the scheme in
  verbose mode. Run bin/hqcX-verbose to generate intermediate values.

During compilation, the following files are created inside the bin/build folder:
- hash.o: A wrapper around openssl SHA512 implementation
- rng.o: NIST rng
- parsing.o: Functions to parse public key, secret key and ciphertext of the
- gf2x_avx2.o: Vectorized functions to multiply polynomials.
  scheme.
- vector.o: Functions to manipulate vectors.
- bch.o: Functions to encode and decode messages using BCH codes (either in
  normal mode or verbose mode).
- fft.o: Functions for the additive Fast Fourier Transform and its transpose.
- gf.o: Functions for Galois field manipulation.
- repetition.o: Functions to encode and decode messages using repetition codes.
- tensor.o: Functions to encode and decode messages using tensor codes (either
  in normal mode or verbose mode).
- hqc.o: The HQC PKE IND-CPA scheme (either in normal mode or verbose mode).
- kem.o: The HQC KEM IND-CCA2 scheme (either in normal mode or verbose mode).


3. DOCUMENTATION 
----------------

3.1 Requirements

The following softwares are required: doxygen and bibtex.

3.2 Generation Step

- Run doxygen doxygen.conf to generate the code documentation
- Browse doc/html/index.html to read the documentation


4. ADDITIONAL INFORMATION 
-------------------------

4.1 Implementation overview

The HQC_KEM IND-CCA2 scheme is defined in the api.h and parameters.h files and implemented in kem.c. The latter is based on the HQC_PKE IND-CPA scheme that is defined in hqc.h and implemented in hqc.c. The HQC_PKE IND-CPA scheme uses Tensor codes (see tensor.h and tensor.c) which is the combination of BCH codes (see bch.h and bch.c) and Repetition codes (see repetition.h and repetition.c). Syndromes and roots computation for BCH codes is done by additive Fast Fourier Transform [3] and its transpose [4] (see fft.h and fft.cpp). Files gf.h and gf.cpp provide the implementation of the underlying Galois field. The files gf2x_avx2.c and gf2x_avx2.h provide a vectorized function performing the multiplication of two polynomials using AVX2 instructions (and AVX512 instructions if they are available). As public key, secret key and ciphertext can be manipulated either with their mathematical representations or as bit strings, the files parsing.h and parsing.c provide functions to switch between these two representations. Finally, the files hash.h, rng.h, hash.c and rng.c (inside the lib/ folder) contain respectively a wrapper around OpenSSL SHA512 implementation and the NIST random functions.    

4.2 Public key, secret key, ciphertext and shared secret

The public key, secret key and ciphertext are respectively composed of the
vectors (h, s), (x, y) and (u, v, d). The shared secret is the output of the
hash of m using SHA512. In order to shorten the keys, the public key is stored
as (seed1, s) and the secret key is stored as (seed2). To this end, the seed
expander provided by the NIST was used along with 40 bytes long seeds.


5. REFERENCES 
-------------

[1] Carlos Aguilar, Olivier Blazy, Jean-Christophe Deneuville, Philippe
Gaborit, and Gilles Zémor. Efficient encryption from random quasi-cyclic codes.
Cryptology ePrint Archive, Report 2016/1194, 2016.

[2] Dennis Hofheinz, Kathrin Hövelmanns, and Eike Kiltz. A modular analysis of
the fujisaki-okamoto transformation. Cryptology ePrint Archive, Report
2017/604, 2017.

[3] Gao, Shuhong, and Todd Mateer. "Additive fast Fourier transforms over finite fields."
IEEE Transactions on Information Theory 56.12 (2010): 6265-6272.

[4] Bernstein, Daniel J., Tung Chou, and Peter Schwabe.
"McBits: fast constant-time code-based cryptography."
International Workshop on Cryptographic Hardware and Embedded Systems.
Springer, Berlin, Heidelberg, 2013.
